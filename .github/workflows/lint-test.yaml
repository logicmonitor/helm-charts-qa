name: Helm Lint and Test Charts

on: pull_request

jobs:
  lint-test:
    strategy:
      matrix:
        k8sversion: [v1.23.5, v1.22.7, v1.21.10, v1.20.15]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.1
      
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: install masterminds/vert
        run: go install github.com/Masterminds/vert@latest
      - name: setup yq
        run: sudo snap install yq

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --config ct.yaml)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi
          otherschanged=$(ct list-changed --config ct.yaml || "no change" | egrep -v "argus")
          if [[ -n "$otherschanged" ]]; then
            echo "::set-output name=otherschanged::true"
          fi
          arguschanged=$(ct list-changed --config ct.yaml || "no change" | grep argus)
          if [[ -n "$arguschanged" ]]; then
            echo "::set-output name=arguschanged::true"
          fi

      - name: Run chart-testing (lint)
        run: ct lint --config ct.yaml

      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
        with:
          node_image: kindest/node:${{ matrix.k8sversion }}
        if: steps.list-changed.outputs.changed == 'true'

      - name: Run chart-testing (install) - except argus
        if: steps.list-changed.outputs.otherschanged == 'true'
        run: |
          export K8SVERSION=${{ matrix.k8sversion }}
          while read -r line ; do
            echo "installing chart $line"
            ct install --config ct.yaml --charts=$line && EXIT_CODE=$(echo $?) || EXIT_CODE=$(echo $?)
            #out=$(ct install --config ct.yaml --charts=$line)
            #EXIT_CODE=$?
            #echo "ct install succeeded"
            #echo $out
            if [[ $EXIT_CODE -eq 0 ]]
            then
               echo "$line is installable on mentioned kubernetes version $K8SVERSION"
            else
              vc=$(yq $line/Chart.yaml -o json | jq ".kubeVersion" | tr -d '"' | tr -d "'")
              echo $vc
              v=$(vert "$vc" "$K8SVERSION")
              if [[ "$v" == "$K8SVERSION" ]]
              then
                echo "Error: kubeVersion constraint expects chart to be installed on $K8SVERSION, but it failed to install"
                exit 1
              else
                echo "installation failed as per constraint"
              fi
            fi
          done < <(ct list-changed --config ct.yaml | egrep -v argus)
          #ct install --config ct.yaml --excluded-charts argus

      - name: Run chart-testing (install) - only argus
        if: steps.list-changed.outputs.arguschanged == 'true'
        run: |
          kubectl apply -f charts/collectorset-controller/crds/collectorset.yaml
          export K8SVERSION=${{ matrix.k8sversion }}
          while read -r line ; do
            #EXIT_CODE=0
            ct install --config ct.yaml --charts=$line && EXIT_CODE=$(echo $?) || EXIT_CODE=$(echo $?)
            #out=$(ct install --config ct.yaml --charts=$line)
            #EXIT_CODE=$?
            #echo $out
            if [[ $EXIT_CODE -eq 0 ]]
            then
               echo "$line is installable on mentioned kubernetes version $K8SVERSION"
            else
              vc=$(yq $line/Chart.yaml -o json | jq ".kubeVersion" | tr -d '"' | tr -d "'")
              echo $vc
              v=$(vert "$vc" "$K8SVERSION")
              if [[ "$v" == "$K8SVERSION" ]]
              then
                echo "Error: kubeVersion constraint expects chart to be installed on $K8SVERSION, but it failed to install"
                exit 1
              else
                echo "installation failed as per constraint"
              fi
            fi
          done < <(echo "charts/argus")
          #ct install --config ct.yaml --charts charts/argus
          kubectl delete -f charts/collectorset-controller/crds/collectorset.yaml

